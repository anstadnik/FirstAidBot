// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class NativePlatform extends FlutterRustBridgeBase<NativeWire>
    with FlutterRustBridgeSetupMixin {
  NativePlatform(FutureOr<WasmModule> dylib) : super(NativeWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_MultilangFs(MultilangFs raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_RwLockFaContext(RwLockFaContext raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
// Section: finalizer

  late final Finalizer<PlatformPointer> _MultilangFsFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_MultilangFs);
  Finalizer<PlatformPointer> get MultilangFsFinalizer => _MultilangFsFinalizer;
  late final Finalizer<PlatformPointer> _RwLockFaContextFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_RwLockFaContext);
  Finalizer<PlatformPointer> get RwLockFaContextFinalizer =>
      _RwLockFaContextFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external NativeWasmModule get wasmModule;

@JS()
@anonymous
class NativeWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external NativeWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_get_data(NativePortType port_);

  external dynamic /* Object */ wire_get_context();

  external dynamic /* void */ wire_get_fs(
      NativePortType port_, Object mlfs, Object ctx);

  external dynamic /* void */ wire_transition(
      NativePortType port_, Object ctx, String text);

  external dynamic /* void */ wire_back(NativePortType port_, Object ctx);

  external dynamic /* void */ wire_home(NativePortType port_, Object ctx);

  external dynamic /* void */ wire_get_path(NativePortType port_, Object ctx);

  external dynamic /*  */ drop_opaque_MultilangFs(ptr);

  external int /* *const c_void */ share_opaque_MultilangFs(ptr);

  external dynamic /*  */ drop_opaque_RwLockFaContext(ptr);

  external int /* *const c_void */ share_opaque_RwLockFaContext(ptr);
}

// Section: WASM wire connector

class NativeWire extends FlutterRustBridgeWasmWireBase<NativeWasmModule> {
  NativeWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<NativeWasmModule>(module));

  void wire_get_data(NativePortType port_) => wasmModule.wire_get_data(port_);

  dynamic /* Object */ wire_get_context() => wasmModule.wire_get_context();

  void wire_get_fs(NativePortType port_, Object mlfs, Object ctx) =>
      wasmModule.wire_get_fs(port_, mlfs, ctx);

  void wire_transition(NativePortType port_, Object ctx, String text) =>
      wasmModule.wire_transition(port_, ctx, text);

  void wire_back(NativePortType port_, Object ctx) =>
      wasmModule.wire_back(port_, ctx);

  void wire_home(NativePortType port_, Object ctx) =>
      wasmModule.wire_home(port_, ctx);

  void wire_get_path(NativePortType port_, Object ctx) =>
      wasmModule.wire_get_path(port_, ctx);

  dynamic /*  */ drop_opaque_MultilangFs(ptr) =>
      wasmModule.drop_opaque_MultilangFs(ptr);

  int /* *const c_void */ share_opaque_MultilangFs(ptr) =>
      wasmModule.share_opaque_MultilangFs(ptr);

  dynamic /*  */ drop_opaque_RwLockFaContext(ptr) =>
      wasmModule.drop_opaque_RwLockFaContext(ptr);

  int /* *const c_void */ share_opaque_RwLockFaContext(ptr) =>
      wasmModule.share_opaque_RwLockFaContext(ptr);
}
