// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Native {
  Future<MultilangFs?> getData({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDataConstMeta;

  RwLockFaContext getContext({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetContextConstMeta;

  Future<FAState?> getFs(
      {required MultilangFs mlfs, required RwLockFaContext ctx, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetFsConstMeta;

  Future<void> transition(
      {required RwLockFaContext ctx, required String text, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTransitionConstMeta;

  Future<void> back({required RwLockFaContext ctx, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBackConstMeta;

  Future<void> home({required RwLockFaContext ctx, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHomeConstMeta;

  Future<String> getPath({required RwLockFaContext ctx, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetPathConstMeta;

  DropFnType get dropOpaqueMultilangFs;
  ShareFnType get shareOpaqueMultilangFs;
  OpaqueTypeFinalizer get MultilangFsFinalizer;

  DropFnType get dropOpaqueRwLockFaContext;
  ShareFnType get shareOpaqueRwLockFaContext;
  OpaqueTypeFinalizer get RwLockFaContextFinalizer;
}

@sealed
class MultilangFs extends FrbOpaque {
  final Native bridge;
  MultilangFs.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMultilangFs;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMultilangFs;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MultilangFsFinalizer;
}

@sealed
class RwLockFaContext extends FrbOpaque {
  final Native bridge;
  RwLockFaContext.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRwLockFaContext;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRwLockFaContext;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RwLockFaContextFinalizer;
}

class FAState {
  final String? link;
  final String message;
  final List<String> nextStates;

  const FAState({
    this.link,
    required this.message,
    required this.nextStates,
  });
}
